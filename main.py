from configparser import ConfigParser
from pyrogram import Client
from pyrogram.raw.functions.stories import GetAllStories
from pyrogram.types import Chat
from pyrogram.types import Dialog
import asyncio
from pyrogram.enums import ChatType
from pyrogram.errors import FloodWait
import os
import csv

config = ConfigParser()

# —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≥–¥–µ API –∏ –ø—Ä–æ—á–µ–µ
base_path = '/home/alex/Documents/telegainfo'
config.read('config.ini')
API_ID = config.get('pyrogram', 'api_id')
API_HASH = config.get('pyrogram', 'api_hash')
RABOTABOT = config.get('pyrogram', 'RABOTA_BY_BOT')
PHONE_NUMBER = config.get('info', 'phonenumber')


async def sign_in(client: Client, phone_number: str):
    """
    –í—Ö–æ–¥ –≤ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ SMS-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–ø–∞—Ä–æ–ª—å).
    """

    try:
        # –ï—Å–ª–∏ —É–∂–µ –≤–æ—à–ª–∏ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        await client.get_me()
        print("Already signed in.")
        return
    except Exception:
        print("Signing in...")
    await client.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    sent_code = await client.send_code(phone_number)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–¥ –∏–∑ SMS
    code = input("Enter Telegram code: ")

    # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
    try:
        await client.sign_in(
            phone_number=phone_number,
            phone_code=code,
            phone_code_hash=sent_code.phone_code_hash
        )
    except Exception:
        print("Invalid code! Please check and try again.")
        return

    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA) ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    try:
        await client.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤–æ—à–ª–∏
        print("Successfully signed in!")
    except Exception:
        cloud_password = input("üîê Enter your Telegram cloud password: ")
        await client.check_password(cloud_password)
        print("Successfully signed in with cloud password!")


async def download_stories(client: Client, chat: Chat, dir_path: str):
    print('downloading stories')
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç ‚Äì –≤—ã—Ö–æ–¥–∏–º
    if chat.type in [ ChatType.CHANNEL, ChatType.GROUP, ChatType.SUPERGROUP, ChatType.BOT ]:
        return

    stories_dir = os.path.join(dir_path, "stories")
    user_id = chat.id
    print(f'stories_dir: {stories_dir}')
    print(f'user_id: {user_id}')
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await client.get_users(user_id)

    username = chat.username if chat.username else ''

    stories = client.get_pinned_stories(username or user_id)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists(stories_dir):
        os.mkdir(stories_dir)
        print(f"Created directory for stories: {stories_dir}")

    index = 1

    async for story in stories:
        file_path = os.path.join(stories_dir, f'story_{username}_{str(story.id)}.jpeg')
        print(f'trying to download: {file_path}')
        if os.path.exists(file_path):
            print(f'{file_path} already exists, skipping.')
            continue
        await client.download_media(story, file_name=file_path)
        print(f"Downloaded story {index} for user {username or user_id}")
        index += 1
    print(f'index: {index}')
    try:
        if index == 1:
            os.rmdir(stories_dir)
    except OSError as e:
        print(f'Can\'t delete directory {stories_dir}, error: {e.strerror}')


async def make_dir(chat: Chat) -> str:
    name = ''
    try:
        if chat.last_name and chat.first_name:
            name = f"{chat.first_name}_{chat.last_name}"
        elif chat.first_name:
            name = chat.first_name
        elif chat.username:
            name = chat.username
        else:
            name = str(chat.id)
    except Exception:
        pass
    name = name.strip()
    path = os.path.join(base_path, name)
    try:
        os.mkdir(path)
        print(f"Directory '{path}' created.")
    except FileExistsError:
        print(f"Directory '{path}' already exists.")
    except Exception as e:
        print(f'Exception: {e}\nCouldn\'t create {name} folder!')
        return ''
    return path


async def download_all_photos(client: Client, chat: Chat, dir: str):
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç ‚Äì –≤—ã—Ö–æ–¥–∏–º
    if chat.type in [ ChatType.CHANNEL, ChatType.GROUP, ChatType.SUPERGROUP, ChatType.BOT ]:
        return

    photos_dir = os.path.join(dir, "photos")
    user_id = chat.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await client.get_users(user_id)

    username = chat.username if chat.username else ''

    photos = client.get_chat_photos(username or user_id)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists(photos_dir):
        os.mkdir(photos_dir)
        print(f"Created directory for photos: {photos_dir}")

    index = 1
    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —á–∞—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ get_chat_photos —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    async for photo in photos:
        file_path = os.path.join(photos_dir, f'photo_{username}_{str(photo.file_id)}.jpeg')
        if os.path.exists(file_path):
            print(f'{file_path} already exists, skipping.')
            continue
        await client.download_media(photo.file_id, file_name=file_path)
        print(f"Downloaded photo {index} for user {username or user_id}")
        index += 1
    try:
        if index == 1:
            os.rmdir(photos_dir)
    except OSError as e:
        print(f'Can\'t delete directory {photos_dir}, error: {e.strerror}')


async def write_info(dir: str, info: dict, filename: str = 'info.csv'):
    if dir:
        filename = os.path.join(dir, filename)
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=info.keys())
        writer.writeheader()
        writer.writerow(info)
    print(f"Wrote info to {filename}")


async def process_dialog(client: Client, dialog: Dialog):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
    if dialog.chat.type != ChatType.PRIVATE:
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait
    try:
        print('Getting chat...')
        chat: Chat = await client.get_chat(dialog.chat.id)
    except FloodWait as e:
        print(f"FloodWait during get_chat({dialog.chat.id}). Waiting {e.value} seconds.")
        await asyncio.sleep(e.value)
        chat = await client.get_chat(dialog.chat.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait
    try:
        print('Getting user data...')
        user = await client.get_users(dialog.chat.id)
    except FloodWait as e:
        print(f"FloodWait during get_users({dialog.chat.id}). Waiting {e.value} seconds.")
        await asyncio.sleep(e.value)
        user = await client.get_users(dialog.chat.id)

    # handle birthday:
    birthday = ''
    if chat.birthday:
        birthday = f'{chat.birthday.day}.{chat.birthday.month}.{chat.birthday.year}'

    info = {
        'id': user.id,
        'username': user.username or 'N/A',
        'first name': user.first_name or 'N/A',
        'last name': user.last_name or 'N/A',
        'phone number': user.phone_number or 'N/A',
        'birthday': birthday or 'N/A',
        'bio': chat.bio or 'N/A',
        'description': chat.description or 'N/A',
    }
    print(f'info about user: {user.full_name}')
    print(info)
    # sleep(5)
    # print(f'Info: {info}')

    print('Making directory...')
    dir_name = await make_dir(chat)
    print(f'Directory: {dir_name}')

    #	print('Downloading photos...')
    await download_all_photos(client, chat, dir_name)
    #	print('Downloading stories...')
    await download_stories(client, chat, dir_name)

    print('Writing CSV file...')
    # await write_info(dir_name, info)
    print(f"Processed dialog for user {user.username or user.id}")


async def get_dialogs(client: Client):
    # target_username = "iamgulovser"
    async for dialog in client.get_dialogs():
        chat = dialog.chat

        print(f'processing\nchat.username: {chat.username}\nchat.first_name: {chat.first_name}')

        # print(f'Dialog: {dialog}') # commented because the output is VERY BIG
        try:
            print('Processing dialog...')
            print(f'Dialog: {dialog.chat.full_name}')
            await process_dialog(client, dialog)
        except FloodWait as e:
            print(f"FloodWait in process_dialog: waiting {e.value} seconds.")
            await asyncio.sleep(e.value)


async def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    async with Client('rabotabyupdater', api_id=API_ID, api_hash=API_HASH) as client:
        print('Signing in...')
        await sign_in(client, PHONE_NUMBER)
        print('Signed in.')
        print('Getting dialogs...')
        await get_dialogs(client)


if __name__ == "__main__":
    asyncio.run(main())

